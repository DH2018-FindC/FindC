{"version":3,"sources":["components/LocationPopup.js","components/MapObj.js","components/AddButton.js","components/AddDialog.js","containers/Main.js"],"names":["LocationPopup","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addCount","key","addOrSub","firebase","database","ref","concat","state","pushKey","set","point","services","kv","F_condoms","F_bcpills","F_iud","D_condoms","D_bcpills","D_iud","_ref","setState","_this2","react_default","a","createElement","style","width","height","fontSize","overflowY","name","href","lat","lng","target","keys","map","d","i","verticalAlign","borderBottom","padding","margin","Button_default","minHeight","minWidth","onClick","role","aria-label","marginTop","color","Component","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","MapObj","setCentered","centered","coords","data","arr","length","latitude","longitude","home","markerList","CircleMarker","center","latLng","radius","fill","fillColor","fillOpacity","Popup","LocationPopup_LocationPopup","Map","zoom","TileLayer","attribution","url","Marker","position","AddButton","bottom","right","zIndex","variant","backgroundColor","setAddNewModalState","Add_default","ak","ENDPOINT_LINK","AddDialog","submitToFirebase","forEach","service","fetch","address","then","json","loc","results","geometry","location","push","clearData","checkError","error","reverseLoading","handleChange","variable","event","defineProperty","value","handleChecked","temp","getReverseGeoLocation","link","formatted_address","open","servicesList","id","title","nextProps","Dialog_default","onClose","aria-labelledby","scroll","DialogTitle_default","DialogContent_default","DialogContentText_default","TextField_default","autoFocus","label","fullWidth","onChange","disabled","loading","CircularProgress_default","FormLabel_default","component","FormGroup_default","FormControlLabel_default","control","Checkbox_default","checked","DialogActions_default","Main","addNewModalOpen","className","overflow","MapObj_MapObj","AddButton_AddButton","AddDialog_AddDialog"],"mappings":"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","file":"static/js/1.2746545e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n/**\r\n * LocationPopup is the popup for a single circle when clicked on\r\n * @class\r\n */\r\nexport default class LocationPopup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            point: this.props.point,\r\n            pushKey: this.props.pushKey\r\n        }\r\n\r\n        this.kv = {\r\n            F_condoms: 'Free condoms',\r\n            F_bcpills: 'Free Birth Control Pills',\r\n            F_iud: 'Free IUDs',\r\n            D_condoms: 'Discounted condoms',\r\n            D_bcpills: 'Discounted Birth Control Pills',\r\n            D_iud: 'Discounted IUDs'\r\n        }\r\n    }\r\n\r\n    /**\r\n     * on component receiving props, set states\r\n     * @param {*} param destructured parameter for point and pushKey\r\n     */\r\n    componentWillReceiveProps({ point, pushKey }) {\r\n        this.setState({ point, pushKey });\r\n    }\r\n\r\n    // if addOrSub true, it adds, otherwise subs\r\n    /**\r\n     * addCount will add a count to the specific discounted/free item\r\n     * @param {string} key key of item to add or subtract\r\n     * @param {boolean} addOrSub if true, it'll add 1, if false it'll subtract 1\r\n     */\r\n    addCount = (key, addOrSub) => {\r\n        firebase.database().ref(`Data/${this.state.pushKey}/services/${key}`).set(this.state.point.services[key] + (addOrSub ? 1 : -1));\r\n    }\r\n\r\n    render() {\r\n        let { point } = this.state;\r\n        return <div style={{ width: 330, height: 360, fontSize: 14, overflowY: 'auto' }}>\r\n            <p><strong>{point.name}</strong></p>\r\n            <p><a href={`https://www.google.com/maps/?q=${point.lat},${point.lng}`} target=\"_blank\">Open in Google Maps</a></p>\r\n            <p>What did you visit for? Give it a thumbs up!</p>\r\n            {Object.keys(point.services).map((d, i) => {\r\n                return <div key={this.state.pushKey + \"\" + i} style={{ verticalAlign: 'baseline', borderBottom: '1px solid black', width: '90%', padding: 3 }}>\r\n                    {this.kv[d]}: {point.services[d]}<span style={{ margin: 3 }}></span>\r\n                    <Button style={{ padding: 0, minHeight: 0, minWidth: 40 }} onClick={() => { this.addCount(d, true) }}><span role=\"img\" aria-label=\"thumbs up\">👍</span></Button>\r\n                    <Button style={{ padding: 0, minHeight: 0, minWidth: 40 }} onClick={() => { this.addCount(d, false) }}><span role=\"img\" aria-label=\"thumbs down\">👎</span></Button>\r\n                </div>\r\n            })}\r\n            <div style={{ marginTop: 10 }}></div>\r\n            <Button color=\"primary\">Petition</Button> <Button color=\"primary\">Suggest</Button> <Button color=\"secondary\">Report</Button>\r\n        </div>\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Map, CircleMarker, Marker, Popup, TileLayer } from 'react-leaflet';\r\nimport './MapObj.css';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport LocationPopup from './LocationPopup';\r\n\r\n// Reset leaflet defaults\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\r\n});\r\n\r\n/**\r\n * MapObj is the leaflet map\r\n * @class\r\n */\r\nexport default class MapObj extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            coords: this.props.coords,\r\n            data: this.props.data,\r\n            centered: [],\r\n        }\r\n    }\r\n\r\n    /**\r\n     * on receiving props, the map updates coordinates and data\r\n     */\r\n    componentWillReceiveProps({ coords, data }) {\r\n        this.setState({ coords, data });\r\n    }\r\n\r\n    /**\r\n     * Set the centered position when clicked on\r\n     */\r\n    setCentered = (lat, lng) => {\r\n        this.setState({ centered: [lat + 0.0025, lng] });\r\n    }\r\n\r\n\r\n    render() {\r\n        let arr = this.state.centered.length > 0 ? this.state.centered : [this.state.coords && this.state.coords.latitude ? this.state.coords.latitude : 0,\r\n        this.state.coords && this.state.coords.longitude ? this.state.coords.longitude : 0];\r\n\r\n        let home = [this.state.coords && this.state.coords.latitude ? this.state.coords.latitude : 0,\r\n        this.state.coords && this.state.coords.longitude ? this.state.coords.longitude : 0]\r\n\r\n        let markerList = Object.keys(this.state.data).map((d, i) => {\r\n            let point = this.state.data[d];\r\n            return <CircleMarker key={'c' + i}\r\n                center={L.latLng(point.lat, point.lng)}\r\n                radius={8}\r\n                fill={true}\r\n                color={'#000000'}\r\n                fillColor={'#ff0000'}\r\n                fillOpacity={'0.75'}\r\n                onClick={() => { this.setCentered(point.lat, point.lng) }}\r\n            >\r\n                <Popup>\r\n                    <LocationPopup point={point} pushKey={d} />\r\n                </Popup>\r\n            </CircleMarker>\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <Map center={arr} zoom={16}>\r\n                    <TileLayer\r\n                        attribution=\"<a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n                    {/* <CircleMarker center={arr}>\r\n                        <Popup>A pretty CSS3 popup.<br />Easily customizable.</Popup>\r\n                    </CircleMarker> */}\r\n                    <Marker position={home} color=\"red\">\r\n                        {/* <Popup>A pretty CSS3 popup.<br />Easily customizable.</Popup> */}\r\n                    </Marker>\r\n                    <div>\r\n                        {markerList}\r\n                    </div>\r\n                </Map>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\n/**\r\n * AddButton is the bottom that appears at the bottom right of the Main page\r\n * @class\r\n */\r\nexport default class AddButton extends Component {\r\n    render() {\r\n        return <div style={{\r\n            position: 'absolute',\r\n            bottom: 20,\r\n            right: 20,\r\n            zIndex: 500\r\n        }}><Button variant=\"fab\" style={{ backgroundColor: \"#421dac\", color: 'white' }} onClick={() => this.props.setAddNewModalState(true)}>\r\n                <AddIcon />\r\n            </Button></div>\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n// pls dont steal\r\nconst ak = 'AIzaSyA-u4mGseXsGu1mLytcpR3skLsn24vwH3Y';\r\nconst ENDPOINT_LINK = 'https://maps.googleapis.com/maps/api/geocode/json?address=';\r\n\r\n/**\r\n * AddDialog is the dialog window for adding information to firebase\r\n * @class\r\n */\r\nexport default class AddDialog extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: this.props.open,\r\n            name: '',\r\n            address: '',\r\n            reverseLoading: false,\r\n            services: {\r\n                F_condoms: false,\r\n                F_bcpills: false,\r\n                F_iud: false,\r\n                D_condoms: false,\r\n                D_bcpills: false,\r\n                D_iud: false\r\n            },\r\n            error: ''\r\n        };\r\n\r\n        this.servicesList = [\r\n            { id: 'F_condoms', title: 'Free Condoms' },\r\n            { id: 'F_bcpills', title: 'Free Birth Control Pills' },\r\n            { id: 'F_iud', title: 'Free IUDs' },\r\n            { id: 'D_condoms', title: 'Discounted Condoms' },\r\n            { id: 'D_bcpills', title: 'Discounted Birth Control Pills' },\r\n            { id: 'D_iud', title: 'Discounted IUDs' }\r\n        ]\r\n    }\r\n\r\n    /**\r\n     * Submit data to firebase based on state. \r\n     * Fetch latitude and longitude of address via Google Cloud Platform and store that into firebase.\r\n     */\r\n    submitToFirebase = () => {\r\n        let services = this.state.services;\r\n        Object.keys(services).forEach(service => {\r\n            services[service] = services[service] ? 1 : 0\r\n        });\r\n\r\n        fetch(`${ENDPOINT_LINK}${this.state.address}&key=${ak}`)\r\n            .then(d => {\r\n                return d.json();\r\n            })\r\n            .then(d => {\r\n                let loc = d.results[0].geometry.location;\r\n                firebase.database().ref('Data').push({\r\n                    name: this.state.name,\r\n                    address: this.state.address,\r\n                    services,\r\n                    lat: loc.lat,\r\n                    lng: loc.lng\r\n                });\r\n                this.clearData();\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Client side security checking-- there is server side as well in Firebase rules\r\n     */\r\n    checkError = () => {\r\n        if (this.state.address === \"\") {\r\n            this.setState({ error: \"address\" });\r\n            return false;\r\n        }\r\n        if (this.state.name === \"\") {\r\n            this.setState({ error: \"name\" });\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Clear state data\r\n     */\r\n    clearData = () => {\r\n        this.setState({\r\n            name: '',\r\n            address: '',\r\n            reverseLoading: false,\r\n            services: {}\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Set open or coordinates if changed\r\n     * @param {*} nextProps \r\n     */\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({\r\n            open: nextProps.open,\r\n            coords: nextProps.coords\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Handle text input change\r\n     */\r\n    handleChange = (variable) => event => {\r\n        this.setState({\r\n            [variable]: event.target.value\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Handle checkbox changed\r\n     */\r\n    handleChecked = (variable) => event => {\r\n        let temp = this.state.services;\r\n        temp[variable] = true;\r\n        this.setState({\r\n            services: temp\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the reverse geolocation to get address from current lat/lng\r\n     */\r\n    getReverseGeoLocation = () => {\r\n        this.setState({ reverseLoading: true });\r\n        let link = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${this.state.coords.latitude},${this.state.coords.longitude}&location_type=ROOFTOP&result_type=street_address&key=${ak}`\r\n        fetch(link).then(d => {\r\n            return d.json();\r\n        }).then(d => {\r\n            this.setState({\r\n                address: d.results[0].formatted_address,\r\n                reverseLoading: false\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <Dialog\r\n                open={this.state.open}\r\n                onClose={() => { this.props.setAddNewModalState(false) }}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                scroll=\"paper\"\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">Add new info</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Please enter information about a location!\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        error={this.state.error === \"name\"}\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Name\"\r\n                        fullWidth\r\n                        onChange={this.handleChange('name')}\r\n                    />\r\n                    <TextField\r\n                        error={this.state.error === \"address\"}\r\n                        margin=\"dense\"\r\n                        id=\"address\"\r\n                        label=\"Address\"\r\n                        fullWidth\r\n                        onChange={this.handleChange('address')}\r\n                        value={this.state.address}\r\n                    />\r\n\r\n                    <Button onClick={() => {\r\n                        // this.props.setAddNewModalState(false)\r\n                        this.getReverseGeoLocation();\r\n                    }} color=\"primary\" disabled={this.state.loading}>\r\n                        Use current location\r\n                    </Button>{this.state.loading && <CircularProgress />}\r\n                    <FormLabel component=\"legend\">What kinds of services does this place provide?</FormLabel>\r\n                    <FormGroup>\r\n                        {this.servicesList.map((d, i) => {\r\n                            return <FormControlLabel key={'check' + i} control={\r\n                                <Checkbox checked={this.state.services[d.id]} onChange={this.handleChecked(d.id)} value={d.id} />\r\n                            }\r\n                                label={d.title} />\r\n                        })}\r\n                    </FormGroup>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => {\r\n                        this.clearData();\r\n                        this.props.setAddNewModalState(false);\r\n                    }} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => {\r\n                        if (this.checkError()) {\r\n                            this.submitToFirebase();\r\n                            this.props.setAddNewModalState(false);\r\n                        }\r\n                    }} color=\"primary\">\r\n                        Submit\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div >\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport MapObj from '../components/MapObj';\r\nimport './Main.css';\r\nimport AddButton from '../components/AddButton';\r\nimport AddDialog from '../components/AddDialog';\r\n\r\n/**\r\n * Main is the component that appears when the route is at '/map'\r\n * This is the main map file\r\n * @class\r\n */\r\nexport default class Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            coords: this.props.coords,\r\n            data: this.props.data,\r\n            addNewModalOpen: false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * On receiving props, update coordinates and data\r\n     * @param {*} props destructured props, which has coords and data  \r\n     */\r\n    componentWillReceiveProps({ coords, data }) {\r\n        this.setState({ coords, data })\r\n    }\r\n\r\n    /**\r\n     * Set modal state open or closed\r\n     * @param {boolean} addNewModalOpen true for open, false for closed.\r\n     */\r\n    setAddNewModalState = (addNewModalOpen) => {\r\n        this.setState({ addNewModalOpen });\r\n    }\r\n\r\n    render() {\r\n        return <div className={`classname`} style={{\r\n            width: '100vw',\r\n            height: '100vh',\r\n            overflow: 'hidden'\r\n        }}>\r\n            <MapObj coords={this.state.coords} style={{ width: '100vw', height: '100vh' }} data={this.state.data} />\r\n            <AddButton setAddNewModalState={this.setAddNewModalState} />\r\n            <AddDialog open={this.state.addNewModalOpen} coords={this.state.coords} setAddNewModalState={this.setAddNewModalState} />\r\n        </div>\r\n    }\r\n}"],"sourceRoot":""}