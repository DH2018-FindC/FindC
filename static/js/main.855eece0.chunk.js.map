{"version":3,"sources":["components/Headbar.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Headbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleDrawer","drawerState","setState","open","state","_this2","react_default","a","createElement","AppBar_default","position","style","backgroundColor","top","left","Toolbar_default","width","Typography_default","variant","color","Link","to","textDecoration","IconButton_default","aria-label","onClick","Menu_default","SwipeableDrawer_default","anchor","onClose","onOpen","tabIndex","role","onKeyDown","List_default","ListItem_default","ListItemText_default","Component","Home","className","Button_default","Navigation_default","Main","Loadable","loader","Promise","all","__webpack_require__","e","then","bind","loading","App","coords","data","navigator","geolocation","getCurrentPosition","d","dataRef","firebase","database","ref","on","snap","val","_this3","BrowserRouter","Headbar_Headbar","Switch","Route","exact","path","render","Home_Home","Boolean","window","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ReactDOM","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.855eece0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Link } from 'react-router-dom';\n\nexport default class Headbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false\n        }\n    }\n\n    toggleDrawer = (drawerState) => {\n        this.setState({ open: drawerState });\n    }\n\n    render() {\n        return <div>\n            <AppBar position=\"static\" style={{\n                backgroundColor: '#421dac',\n                position: 'absolute', top: 0, left: 0\n            }}>\n                <Toolbar>\n                    <div style={{\n                        width: '100%'\n                    }}>\n                        <Typography variant=\"h6\" color=\"inherit\">\n                            <Link to=\"\" style={{ textDecoration: 'none', color: 'white' }}>\n                                FindC\n                            </Link>\n                        </Typography>\n                    </div>\n                    <IconButton color=\"inherit\" aria-label=\"Menu\" onClick={() => {\n                        this.toggleDrawer(true)\n                    }}>\n                        <MenuIcon />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n            <SwipeableDrawer\n                anchor=\"right\"\n                open={this.state.open}\n                onClose={() => this.toggleDrawer(false)}\n                onOpen={() => this.toggleDrawer(true)}\n\n            >\n                <div\n                    style={{\n                        width: 250\n                    }}\n                    tabIndex={0}\n                    role=\"button\"\n                    onClick={() => this.toggleDrawer(false)}\n                    onKeyDown={() => this.toggleDrawer(false)}\n                >\n                    <div>\n                        <List >\n                            <ListItem>\n                                <ListItemText>\n                                    <Link to=\"\" style={{ textDecoration: 'none', color: 'black' }} >Home</Link>\n                                </ListItemText>\n                            </ListItem>\n                            <ListItem>\n                                <ListItemText>\n                                    <Link to=\"/map\" style={{ textDecoration: 'none', color: 'black' }} >Map</Link>\n                                </ListItemText>\n                            </ListItem>\n                            <ListItem>\n                                <ListItemText>\n                                    <Link to=\"/about\" style={{ textDecoration: 'none', color: 'black' }}>About</Link>\n                                </ListItemText>\n                            </ListItem>\n                        </List>\n                        {/* <Divider /> */}\n                    </div>\n                </div>\n            </SwipeableDrawer>\n        </div>;\n    }\n}","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport NavigationIcon from '@material-ui/icons/Navigation';\nimport {Link} from 'react-router-dom';\nimport './Home.css';\n\nexport default class Home extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className={'container'}>\n                <Link to=\"/map\">\n                <Button variant=\"extendedFab\" className={'button'} style={{backgroundColor: '#ff7777', color: 'white'}} >\n                    <NavigationIcon/>\n                    Check My Area\n                </Button>\n                </Link>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport firebase from 'firebase/app';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Loadable from 'react-loadable';\nimport Headbar from './components/Headbar';\nimport Home from './components/Home';\nimport 'firebase/database';\n\n\nconst Loading = () => <div></div>;\nconst Main = Loadable({\n    loader: () => import('./containers/Main'),\n    loading: Loading,\n})\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            coords: {},\n            data: {}\n        }\n    }\n\n    componentWillMount() {\n        navigator.geolocation.getCurrentPosition(d => {\n            this.setState({\n                coords: d.coords\n            });\n        });\n\n        this.dataRef = firebase.database().ref('Data').on('value', (snap) => {\n            this.setState({ data: snap.val() });\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Router>\n                    <div>\n                        <Headbar />\n                        <Switch>\n                            <Route exact path=\"/about\" render={() => <div>About page</div>} />\n                            <Route exact path=\"/map\" render={() => <Main coords={this.state.coords} data={this.state.data} />} />\n                            <Route render={() => <Home />} />\n                        </Switch>\n                    </div>\n                </Router>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase/app';\n\n// import firebase\nlet config = {\n    apiKey: \"AIzaSyAZaMPQd-aOdFZjOCJpMS8U_bwqnMAC-gU\",\n    authDomain: \"findc-4a7e5.firebaseapp.com\",\n    databaseURL: \"https://findc-4a7e5.firebaseio.com\",\n    projectId: \"findc-4a7e5\",\n    storageBucket: \"findc-4a7e5.appspot.com\",\n    messagingSenderId: \"814470540647\"\n};\nfirebase.initializeApp(config);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}