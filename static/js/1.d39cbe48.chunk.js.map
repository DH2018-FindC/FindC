{"version":3,"sources":["components/LocationPopup.js","components/MapObj.js","components/AddButton.js","components/AddDialog.js","components/SearchButton.js","components/SearchDialog.js","containers/Main.js"],"names":["LocationPopup","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addCount","key","addOrSub","firebase","database","ref","concat","state","pushKey","set","point","services","kv","F_condoms","F_bcpills","F_iud","D_condoms","D_bcpills","D_iud","D_morningAfter","_ref","setState","_this2","react_default","a","createElement","style","width","height","fontSize","overflowY","name","href","lat","lng","target","keys","map","d","i","verticalAlign","borderBottom","padding","margin","Button_default","minHeight","minWidth","onClick","role","aria-label","marginTop","color","Component","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","MapObj","setCentered","centered","containsServices","returnBool","forEach","console","log","coords","data","arr","length","latitude","longitude","home","markerList","CircleMarker","center","latLng","radius","fill","fillColor","fillOpacity","Popup","LocationPopup_LocationPopup","Map","zoom","TileLayer","attribution","url","Marker","position","AddButton","bottom","right","zIndex","variant","backgroundColor","setAddNewModalState","Add_default","ak","ENDPOINT_LINK","AddDialog","submitToFirebase","service","fetch","address","then","json","loc","results","geometry","location","push","clearData","checkError","error","reverseLoading","handleChange","variable","event","defineProperty","value","handleChecked","temp","getReverseGeoLocation","link","formatted_address","open","servicesList","id","title","nextProps","Dialog_default","onClose","aria-labelledby","scroll","DialogTitle_default","DialogContent_default","DialogContentText_default","TextField_default","autoFocus","label","fullWidth","onChange","disabled","CircularProgress_default","FormLabel_default","component","FormGroup_default","FormControlLabel_default","control","Checkbox_default","checked","DialogActions_default","SearchButton","setSearchModalState","Search_default","SearchDialog","loading","submit","setNewCoords","setFilter","Main","addNewModalOpen","searchModalOpen","className","overflow","MapObj_MapObj","AddButton_AddButton","SearchButton_SearchButton","AddDialog_AddDialog","SearchDialog_SearchDialog"],"mappings":"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","file":"static/js/1.d39cbe48.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n/**\n * LocationPopup is the popup for a single circle when clicked on\n * @class\n */\nexport default class LocationPopup extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            point: this.props.point,\n            pushKey: this.props.pushKey\n        }\n\n        this.kv = {\n            F_condoms: 'Free condoms',\n            F_bcpills: 'Free Birth Control Pills',\n            F_iud: 'Free IUDs',\n            D_condoms: 'Discounted condoms',\n            D_bcpills: 'Discounted Birth Control Pills',\n            D_iud: 'Discounted IUDs',\n            D_morningAfter: 'Discounted Morning After Pills'\n        }\n    }\n\n    /**\n     * on component receiving props, set states\n     * @param {*} param destructured parameter for point and pushKey\n     */\n    componentWillReceiveProps({ point, pushKey }) {\n        this.setState({ point, pushKey });\n    }\n\n    // if addOrSub true, it adds, otherwise subs\n    /**\n     * addCount will add a count to the specific discounted/free item\n     * @param {string} key key of item to add or subtract\n     * @param {boolean} addOrSub if true, it'll add 1, if false it'll subtract 1\n     */\n    addCount = (key, addOrSub) => {\n        firebase.database().ref(`Data/${this.state.pushKey}/services/${key}`).set(this.state.point.services[key] + (addOrSub ? 1 : -1));\n    }\n\n    render() {\n        let { point } = this.state;\n        return <div style={{ width: 330, height: 360, fontSize: 14, overflowY: 'auto' }}>\n            <p><strong>{point.name}</strong></p>\n            <p><a href={`https://www.google.com/maps/?q=${point.lat},${point.lng}`} target=\"_blank\">Open in Google Maps</a></p>\n            <p>What did you visit for? Give it a thumbs up!</p>\n            {Object.keys(point.services).map((d, i) => {\n                return <div key={this.state.pushKey + \"\" + i} style={{ verticalAlign: 'baseline', borderBottom: '1px solid black', width: '90%', padding: 3 }}>\n                    {this.kv[d]}: {point.services[d]}<span style={{ margin: 3 }}></span>\n                    <Button style={{ padding: 0, minHeight: 0, minWidth: 40 }} onClick={() => { this.addCount(d, true) }}><span role=\"img\" aria-label=\"thumbs up\">👍</span></Button>\n                    <Button style={{ padding: 0, minHeight: 0, minWidth: 40 }} onClick={() => { this.addCount(d, false) }}><span role=\"img\" aria-label=\"thumbs down\">👎</span></Button>\n                </div>\n            })}\n            <div style={{ marginTop: 10 }}></div>\n            <Button color=\"primary\">Petition</Button> <Button color=\"primary\">Suggest</Button> <Button color=\"secondary\">Report</Button>\n        </div>\n    }\n}\n","import React, { Component } from 'react';\nimport { Map, CircleMarker, Marker, Popup, TileLayer } from 'react-leaflet';\nimport './MapObj.css';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport LocationPopup from './LocationPopup';\n\n// Reset leaflet defaults\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\n/**\n * MapObj is the leaflet map\n * @class\n */\nexport default class MapObj extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            coords: this.props.coords,\n            data: this.props.data,\n            services: this.props.services,\n            centered: [],\n        }\n    }\n\n    /**\n     * on receiving props, the map updates coordinates and data\n     */\n    componentWillReceiveProps({ coords, data, services }) {\n        this.setState({ coords, data, services });\n    }\n\n    /**\n     * Set the centered position when clicked on\n     */\n    setCentered = (lat, lng) => {\n        this.setState({ centered: [lat + 0.0025, lng] });\n    }\n\n    containsServices = (point) => {\n        let returnBool = true;\n        Object.keys(this.state.services).forEach(d => {\n            console.log(this.state.services[d], point.services[d])\n            if (this.state.services[d] && point.services[d] <= 0) {\n                returnBool = false;\n            }\n        })\n        return returnBool;\n    }\n\n\n    render() {\n        let arr = this.state.centered.length > 0 ? this.state.centered : [this.state.coords && this.state.coords.latitude ? this.state.coords.latitude : 0,\n        this.state.coords && this.state.coords.longitude ? this.state.coords.longitude : 0];\n\n        let home = [this.state.coords && this.state.coords.latitude ? this.state.coords.latitude : 0,\n        this.state.coords && this.state.coords.longitude ? this.state.coords.longitude : 0]\n\n        let markerList = Object.keys(this.state.data).map((d, i) => {\n            let point = this.state.data[d];\n            if (this.containsServices(point)) {\n                return <CircleMarker key={'c' + i}\n                    center={L.latLng(point.lat, point.lng)}\n                    radius={8}\n                    fill={true}\n                    color={'#000000'}\n                    fillColor={'#ff0000'}\n                    fillOpacity={'0.75'}\n                    onClick={() => { this.setCentered(point.lat, point.lng) }}\n                >\n                    <Popup>\n                        <LocationPopup point={point} pushKey={d} />\n                    </Popup>\n                </CircleMarker>\n            } else {\n                return null;\n            }\n        });\n\n        return (\n            <div>\n                <Map center={arr} zoom={16}>\n                    <TileLayer\n                        attribution=\"<a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n                    {/* <CircleMarker center={arr}>\n                        <Popup>A pretty CSS3 popup.<br />Easily customizable.</Popup>\n                    </CircleMarker> */}\n                    <Marker position={home} color=\"red\">\n                        {/* <Popup>A pretty CSS3 popup.<br />Easily customizable.</Popup> */}\n                    </Marker>\n                    <div>\n                        {markerList}\n                    </div>\n                </Map>\n            </div>\n\n        )\n    }\n}","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\n\n/**\n * AddButton is the bottom that appears at the bottom right of the Main page\n * @class\n */\nexport default class AddButton extends Component {\n    render() {\n        return <div style={{\n            position: 'absolute',\n            bottom: 20,\n            right: 20,\n            zIndex: 500\n        }}><Button variant=\"fab\" style={{ backgroundColor: \"#421dac\", color: 'white' }} onClick={() => this.props.setAddNewModalState(true)}>\n                <AddIcon />\n            </Button></div>\n    }\n}","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n// pls dont steal\nconst ak = 'AIzaSyA-u4mGseXsGu1mLytcpR3skLsn24vwH3Y';\nconst ENDPOINT_LINK = 'https://maps.googleapis.com/maps/api/geocode/json?address=';\n\n/**\n * AddDialog is the dialog window for adding information to firebase\n * @class\n */\nexport default class AddDialog extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: this.props.open,\n            name: '',\n            address: '',\n            reverseLoading: false,\n            services: {\n                F_condoms: false,\n                F_bcpills: false,\n                F_iud: false,\n                D_condoms: false,\n                D_bcpills: false,\n                D_iud: false,\n                D_morningAfter: false\n            },\n            error: ''\n        };\n\n        this.servicesList = [\n            { id: 'F_condoms', title: 'Free Condoms' },\n            { id: 'F_bcpills', title: 'Free Birth Control Pills' },\n            { id: 'F_iud', title: 'Free IUDs' },\n            { id: 'D_condoms', title: 'Discounted Condoms' },\n            { id: 'D_bcpills', title: 'Discounted Birth Control Pills' },\n            { id: 'D_iud', title: 'Discounted IUDs' },\n            { id: 'D_morningAfter', title: 'Discounted Morning After Pills' }\n        ]\n    }\n\n    /**\n     * Submit data to firebase based on state. \n     * Fetch latitude and longitude of address via Google Cloud Platform and store that into firebase.\n     */\n    submitToFirebase = () => {\n        let services = this.state.services;\n        Object.keys(services).forEach(service => {\n            services[service] = services[service] ? 1 : 0\n        });\n\n        fetch(`${ENDPOINT_LINK}${this.state.address}&key=${ak}`)\n            .then(d => {\n                return d.json();\n            })\n            .then(d => {\n                let loc = d.results[0].geometry.location;\n                firebase.database().ref('Data').push({\n                    name: this.state.name,\n                    address: this.state.address,\n                    services,\n                    lat: loc.lat,\n                    lng: loc.lng\n                });\n                this.clearData();\n            });\n    }\n\n    /**\n     * Client side security checking-- there is server side as well in Firebase rules\n     */\n    checkError = () => {\n        if (this.state.address === \"\") {\n            this.setState({ error: \"address\" });\n            return false;\n        }\n        if (this.state.name === \"\") {\n            this.setState({ error: \"name\" });\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Clear state data\n     */\n    clearData = () => {\n        this.setState({\n            name: '',\n            address: '',\n            reverseLoading: false,\n            services: {}\n        })\n    }\n\n    /**\n     * Set open or coordinates if changed\n     * @param {*} nextProps \n     */\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            open: nextProps.open,\n            coords: nextProps.coords\n        })\n    }\n\n    /**\n     * Handle text input change\n     */\n    handleChange = (variable) => event => {\n        this.setState({\n            [variable]: event.target.value\n        })\n    }\n\n    /**\n     * Handle checkbox changed\n     */\n    handleChecked = (variable) => event => {\n        let temp = this.state.services;\n        temp[variable] = !temp[variable];\n        this.setState({\n            services: temp\n        });\n    }\n\n    /**\n     * Get the reverse geolocation to get address from current lat/lng\n     */\n    getReverseGeoLocation = () => {\n        this.setState({ reverseLoading: true });\n        let link = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${this.state.coords.latitude},${this.state.coords.longitude}&location_type=ROOFTOP&result_type=street_address&key=${ak}`\n        fetch(link).then(d => {\n            return d.json();\n        }).then(d => {\n            this.setState({\n                address: d.results[0].formatted_address,\n                reverseLoading: false\n            });\n        })\n    }\n\n    render() {\n        return <div>\n            <Dialog\n                open={this.state.open}\n                onClose={() => { this.props.setAddNewModalState(false) }}\n                aria-labelledby=\"form-dialog-title\"\n                scroll=\"paper\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Add new info</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Please enter information about a location!\n                    </DialogContentText>\n                    <TextField\n                        error={this.state.error === \"name\"}\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        label=\"Name\"\n                        fullWidth\n                        onChange={this.handleChange('name')}\n                    />\n                    <TextField\n                        error={this.state.error === \"address\"}\n                        margin=\"dense\"\n                        id=\"address\"\n                        label=\"Address\"\n                        fullWidth\n                        onChange={this.handleChange('address')}\n                        value={this.state.address}\n                    />\n\n                    <Button onClick={() => {\n                        // this.props.setAddNewModalState(false)\n                        this.getReverseGeoLocation();\n                    }} color=\"primary\" disabled={this.state.reverseLoading}>\n                        Use current location\n                    </Button>{this.state.reverseLoading && <CircularProgress />}\n                    <FormLabel component=\"legend\">What kinds of services does this place provide?</FormLabel>\n                    <FormGroup>\n                        {this.servicesList.map((d, i) => {\n                            return <FormControlLabel key={'check' + i} control={\n                                <Checkbox checked={this.state.services[d.id]} onChange={this.handleChecked(d.id)} value={d.id} />\n                            }\n                                label={d.title} />\n                        })}\n                    </FormGroup>\n\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => {\n                        this.clearData();\n                        this.props.setAddNewModalState(false);\n                    }} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={() => {\n                        if (this.checkError()) {\n                            this.submitToFirebase();\n                            this.props.setAddNewModalState(false);\n                        }\n                    }} color=\"primary\">\n                        Submit\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div >\n    }\n}\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport SearchIcon from '@material-ui/icons/Search';\n\n/**\n * AddButton is the bottom that appears at the bottom right of the Main page\n * @class\n */\nexport default class SearchButton extends Component {\n    render() {\n        return <div style={{\n            position: 'absolute',\n            bottom: 20,\n            right: 80,\n            zIndex: 500\n        }}><Button variant=\"fab\" style={{ backgroundColor: \"#421dac\", color: 'white' }} onClick={() => this.props.setSearchModalState(true)}>\n                <SearchIcon />\n            </Button></div>\n    }\n}","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n// pls dont steal\nconst ak = 'AIzaSyA-u4mGseXsGu1mLytcpR3skLsn24vwH3Y';\nconst ENDPOINT_LINK = 'https://maps.googleapis.com/maps/api/geocode/json?address=';\n\n/**\n * AddDialog is the dialog window for adding information to firebase\n * @class\n */\nexport default class SearchDialog extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: this.props.open,\n            address: '',\n            loading: false,\n            services: {\n                F_condoms: false,\n                F_bcpills: false,\n                F_iud: false,\n                D_condoms: false,\n                D_bcpills: false,\n                D_iud: false,\n                D_morningAfter: false\n            },\n            error: '',\n            coords: this.props.coords\n        };\n\n        this.servicesList = [\n            { id: 'F_condoms', title: 'Free Condoms' },\n            { id: 'F_bcpills', title: 'Free Birth Control Pills' },\n            { id: 'F_iud', title: 'Free IUDs' },\n            { id: 'D_condoms', title: 'Discounted Condoms' },\n            { id: 'D_bcpills', title: 'Discounted Birth Control Pills' },\n            { id: 'D_iud', title: 'Discounted IUDs' },\n            { id: 'D_morningAfter', title: 'Discounted Morning After Pills' }\n        ]\n    }\n\n    /**\n     * Clear state data\n     */\n    clearData = () => {\n        this.setState({\n            address: '',\n            loading: false,\n            services: {}\n        })\n    }\n\n    submit = () => {\n        fetch(`${ENDPOINT_LINK}${this.state.address}&key=${ak}`)\n            .then(d => {\n                return d.json();\n            })\n            .then(d => {\n                let loc = d.results[0].geometry.location;\n                this.props.setNewCoords(loc.lat, loc.lng);\n                this.props.setFilter(this.state.services);\n                this.clearData();\n            });\n    }\n\n\n    /**\n * Get the reverse geolocation to get address from current lat/lng\n */\n    getReverseGeoLocation = () => {\n        this.setState({ loading: true });\n        let link = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${this.state.coords.latitude},${this.state.coords.longitude}&location_type=ROOFTOP&result_type=street_address&key=${ak}`\n        fetch(link).then(d => {\n            return d.json();\n        }).then(d => {\n            this.setState({\n                address: d.results[0].formatted_address,\n                loading: false\n            });\n        })\n    }\n\n    /**\n     * Set open or coordinates if changed\n     * @param {*} nextProps \n     */\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            open: nextProps.open,\n            coords: nextProps.coords\n        })\n    }\n\n    /**\n     * Handle text input change\n     */\n    handleChange = (variable) => event => {\n        this.setState({\n            [variable]: event.target.value\n        })\n    }\n\n    /**\n     * Handle checkbox changed\n     */\n    handleChecked = (variable) => event => {\n        let temp = this.state.services;\n        temp[variable] = !temp[variable];\n        this.setState({\n            services: temp\n        });\n    }\n\n    render() {\n        return <div>\n            <Dialog\n                open={this.state.open}\n                onClose={() => { this.props.setSearchModalState(false) }}\n                aria-labelledby=\"form-dialog-title\"\n                scroll=\"paper\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Search or filter</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Please enter the address you would like to see.\n                    </DialogContentText>\n                    <TextField\n                        error={this.state.error === \"address\"}\n                        margin=\"dense\"\n                        id=\"address\"\n                        label=\"Address\"\n                        fullWidth\n                        onChange={this.handleChange('address')}\n                        value={this.state.address}\n                    />\n                    <Button onClick={() => {\n                        // this.props.setAddNewModalState(false)\n                        this.getReverseGeoLocation();\n                    }} color=\"primary\" disabled={this.state.loading}>\n                        Use current location\n                    </Button>{this.state.loading && <CircularProgress />}\n                    <FormLabel component=\"legend\">What kinds of services are you looking for?</FormLabel>\n                    <FormGroup>\n                        {this.servicesList.map((d, i) => {\n                            return <FormControlLabel key={'check' + i} control={\n                                <Checkbox checked={this.state.services[d.id]} onChange={this.handleChecked(d.id)} value={d.id} />\n                            }\n                                label={d.title} />\n                        })}\n                    </FormGroup>\n\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => {\n                        this.clearData();\n                        this.props.setSearchModalState(false);\n                    }} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={() => {\n                        this.submit();\n                        this.props.setSearchModalState(false);\n                    }} color=\"primary\">\n                        Submit\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div >\n    }\n}\n","import React, { Component } from 'react';\nimport MapObj from '../components/MapObj';\nimport './Main.css';\nimport AddButton from '../components/AddButton';\nimport AddDialog from '../components/AddDialog';\nimport SearchButton from '../components/SearchButton';\nimport SearchDialog from '../components/SearchDialog';\n\n/**\n * Main is the component that appears when the route is at '/map'\n * This is the main map file\n * @class\n */\nexport default class Main extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            coords: this.props.coords,\n            data: this.props.data,\n            addNewModalOpen: false,\n            searchModalOpen: false,\n            services: {}\n        }\n    }\n\n    /**\n     * On receiving props, update coordinates and data\n     * @param {*} props destructured props, which has coords and data  \n     */\n    componentWillReceiveProps({ coords, data }) {\n        this.setState({ coords, data })\n    }\n\n    /**\n     * Set modal state open or closed\n     * @param {boolean} addNewModalOpen true for open, false for closed.\n     */\n    setAddNewModalState = (addNewModalOpen) => {\n        this.setState({ addNewModalOpen });\n    }\n\n    /**\n     * set modal state of search open or closed\n     * @param {boolean} searchModalOpen\n     */\n    setSearchModalState = (searchModalOpen) => {\n        this.setState({ searchModalOpen });\n    }\n\n    setNewCoords = (latitude, longitude) => {\n        this.setState({\n            coords: { latitude, longitude }\n        })\n    }\n\n    setFilter = (services) => {\n        this.setState({ services });\n    }\n\n    render() {\n        return <div className={`classname`} style={{\n            width: '100vw',\n            height: '100vh',\n            overflow: 'hidden'\n        }}>\n            <MapObj coords={this.state.coords} style={{ width: '100vw', height: '100vh' }} data={this.state.data} services={this.state.services} />\n            <AddButton setAddNewModalState={this.setAddNewModalState} />\n            <SearchButton setSearchModalState={this.setSearchModalState} />\n            <AddDialog open={this.state.addNewModalOpen} coords={this.state.coords} setAddNewModalState={this.setAddNewModalState} />\n            <SearchDialog open={this.state.searchModalOpen} setNewCoords={this.setNewCoords} coords={this.state.coords} setSearchModalState={this.setSearchModalState} setFilter={this.setFilter} />\n        </div>\n    }\n}"],"sourceRoot":""}